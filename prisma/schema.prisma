generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Ads
model Ads {
  id        Int      @id @default(autoincrement())
  imgLogo   String?
  imgAds    String[]
  favorite  Boolean?
  group     String?
  title     String?
  price     Int?
  city      String?
  time      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// AdsTitle
model Header {
  id        Int      @id @default(autoincrement())
  name   String
  iconName    String
  allGroup  String
  title     String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Example
model Brand {
  id       Int       @id @default(autoincrement())
  name     String
  products Product[]
}

model Product {
  id        Int      @id @default(autoincrement())
  title     String
  price     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  brandId   Int
  brand     Brand    @relation(fields: [brandId], references: [id])
}

// Auth
model User {
  id            String    @id @default(uuid())
  name          String
  email         String?   @unique
  password      String?
  emailVerified DateTime? @map("email_verified")
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model Account {
  id                String   @id @default(uuid())
  userId            String   @map("user_id")
  type              String?
  provider          String
  providerAccountId String   @map("provider_account_id")
  token_type        String?
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  scope             String?
  id_token          String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(uuid())
  userId       String?  @map("user_id")
  sessionToken String   @unique @map("session_token")
  accessToken  String?  @map("access_token")
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationRequest {
  id         String   @id @default(uuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}
